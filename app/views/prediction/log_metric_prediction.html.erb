<h1>Prediction</h1>

<div id="app_form">
  <select name="app_name" v-model="app_name" v-on:change="updateNodeList" >
    <option value="" selected="selected">Make a choice</option>
    <option v-for="app in app_names" > {{ app.name }}</option>
  </select>

  <select name="node_id" v-model="node_id" v-on:change="updateLogLevelList">
    <option ref="default_node" value="" selected="selected">Make a choice</option>
    <option v-for="node in node_ids" > {{ node.node_id }}</option>
  </select>

    <select name="log_level" v-model="log_level" v-on:change="getChartData">
    <option value="" selected="selected">Make a choice</option>
    <option v-for="log_level in log_levels" > {{ log_level }}</option>
  </select>

  <line-chart ref="diagram"/>
</div>

<script type="text/javascript">
    Vue.component('line-chart', {
        extends: VueChartJs.Line,
        mounted () {
            this.renderChart({
                labels: [],
                datasets: [
                    {
                        label: '',
                        backgroundColor: '#ff72fb',
                        data: []
                    }
                ]
            }, {responsive: true, maintainAspectRatio: false})
        },
        methods: {
            update(data) {
                console.log(data)
                let labels = []
                let dots = []

                data.forEach(item => {
                    labels.push(item.timestamp)
                    dots.push(item.quantity)
                })

                this.renderChart({
                    labels: labels,
                    datasets: [
                        {
                            label: data[0].app_name,
                            backgroundColor: '#ff72fb',
                            data: dots,
                        }
                    ]
                }, {responsive: true, maintainAspectRatio: false})
            }
        }

    })

    app_form = new Vue({
        el: '#app_form',
        data: {
            app_options: null,
            app_names: [],
            node_ids: [],
            log_levels: [],
            app_name: '',
            node_id: '',
            log_level: '',
            chart_data: null,
        },
        mounted() {
            this.getAllAppOptions()
        },
        methods: {
            async getAllAppOptions() {
                await axios.get('/app_options').then(result => {
                    this.app_options = result.data
                    this.setDistinct()
                })
            },
            isAppNameExists(app_name) {
                for (let i = 0; i < this.app_names.length; i++) {
                    if (this.app_names[i].name === app_name) {
                        return this.app_names[i]
                    }
                }

                return false
            },
            isNodeIsExists(app, node_id) {
                for (let i = 0; i < app.node_ids.length; i++) {
                    if (app.node_ids[i].node_id === node_id) {
                        return app.node_ids[i]
                    }
                }

                return false
            },
            updateNodeList() {
                this.app_names.forEach(item => {
                    if(item.name === this.app_name) {
                        this.node_ids = item.node_ids
                    }
                })

                this.node_id = ''
            },
            updateLogLevelList() {
                 this.log_level = ''
                this.app_names.forEach(item => {
                    if(item.name === this.app_name) {
                        item.node_ids.forEach(node => {
                            if(node.node_id === this.node_id) {
                                this.log_levels = node.log_levels
                            }
                        })
                    }
                })


            },
            setDistinct() {
                this.app_options.forEach(item => {
                    let app = this.isAppNameExists(item.app_name)

                    if (!app) {
                        this.app_names.push({
                            "name": item.app_name,
                            "node_ids": [
                                {
                                    "node_id": item.node_id,
                                    "log_levels": [item.log_level]
                                }
                            ],
                        })
                    } else {
                        let node = this.isNodeIsExists(app, item.node_id)

                        if (!node) {
                            app.node_ids.push({
                                "node_id": item.node_id,
                                "log_levels": [item.log_level]
                            })
                        } else {
                            node.log_levels.push(item.log_level)
                        }
                    }
                })
            },
            async getChartData() {
                axios.defaults.headers.common['X-CSRF-Token'] = document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                let data = []

                axios.post('/chartdata', {
                    app_name: this.app_name,
                    node_id: this.node_id,
                    log_level: this.log_level
                }).then(result => {
                    this.chart_data = result.data
                    this.$refs.diagram.update(this.chart_data)
                }).catch(err => {
                    console.log(err)
                })

                return data
            },
        }
    })
</script>